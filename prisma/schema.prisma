// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  id             String    @id @default(uuid())
  fullName       String    @db.VarChar(55)
  email          String    @unique @db.VarChar(45)
  password       String    @db.VarChar(105)
  passwordVerify Boolean   @default(false)
  token          String    @db.VarChar(255)
  refreshToken   String    @db.VarChar(505)
  clinic         Clinic[]
}

model Clinic {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  id        String    @id @default(uuid())
  userId    String?   @db.Char(36)
  title     String    @db.VarChar(55)
  fantasy   String    @db.VarChar(55)
  cnpj      String    @db.VarChar(18)
  ie        String    @db.VarChar(15)
  phones    Json[]
  address   Json?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rooms     Room[]

  @@index([userId])
}

model Room {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  id        String    @id @default(uuid())
  clinicId  String?   @db.Char(36)
  name      String    @db.VarChar(18)
  Clinic    Clinic?   @relation(fields: [clinicId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([clinicId])
}
